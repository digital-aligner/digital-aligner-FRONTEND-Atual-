import 'dart:convert';

import 'package:digital_aligner_app/appbar/SecondaryAppbar.dart';

import 'package:digital_aligner_app/providers/auth_provider.dart';

import 'package:digital_aligner_app/providers/pedidos_list_provider.dart';
import 'package:digital_aligner_app/rotas_url.dart';

import 'package:digital_aligner_app/screens/gerar_relatorio_screen.dart';
import 'package:digital_aligner_app/screens/login_screen.dart';

import 'package:digital_aligner_app/screens/relatorio_view_screen.dart';
import 'package:digital_aligner_app/screens/view_images_screen.dart';

//import 'package:easy_web_view2/easy_web_view2.dart';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/link.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:http/http.dart' as http;
import 'editar_pedido.dart';

import 'dart:html' as html;

import 'view_modelo_screen.dart';

//import 'package:transparent_image/transparent_image.dart';

class PedidoViewScreen extends StatefulWidget {
  static const routeName = '/pedido-view';
  @override
  _PedidoViewScreenState createState() => _PedidoViewScreenState();
}

class _PedidoViewScreenState extends State<PedidoViewScreen> {
  PedidosListProvider _pedidosListStore;

  AuthProvider _authStore;
  List<dynamic> pedList;
  List<dynamic> relatorioData;

  String _modeloSupLink;
  String _modeloInfLink;

  int index;

  bool relatorioFirstFetch = true;
  bool fetchingZip = false;

  ValueKey key = ValueKey('key_0');
  ValueKey key1 = ValueKey('key_1');

  bool modelsVisible = false;

  //Set the urls to file on disk (local storage) to be retrieved by
  //html file in web folder
  Future<void> _setModelosUrlToStorage(String _mSupUrl, String _mInfUrl) async {
    //Save token in device (web or mobile)
    final prefs = await SharedPreferences.getInstance();

    final modelosData = json.encode({
      'modelo_superior': _mSupUrl,
      'modelo_inferior': _mInfUrl,
    });
    prefs.setString('modelos_3d_url', modelosData);
  }

  //For fetching the small amazon img version, insert "small_" before img name.
  String _thumbImgUrlFormat(String url) {
    int originalIndex = url.indexOf('.com/');
    int insertIndex = originalIndex + 5;

    String firstHalf = url.substring(0, insertIndex);
    String secondHalf = url.substring(insertIndex, url.length);

    String complete = firstHalf + 'thumbnail_' + secondHalf;
    return complete;
  }

  Widget _mapImagesUrlToUi(
    BuildContext ctx,
    Map<String, dynamic> images,
  ) {
    List<Widget> networkImgList = [];

    for (int i = 1; i <= images.length; i++) {
      if (images['foto' + i.toString()] != null &&
          images['foto' + i.toString()].length > 60) {
        String photoFullQualityUrl = images['foto' + i.toString()];
        String photoSmallUrl = _thumbImgUrlFormat(photoFullQualityUrl);

        networkImgList.add(
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Column(
              children: [
                Tooltip(
                  message: 'Visualizar',
                  child: GestureDetector(
                    onTap: () {
                      //_viewImage(ctx, photoFullQualityUrl);
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => ViewImagesScreen(
                            imgUrl: photoFullQualityUrl,
                          ),
                        ),
                      );
                    },
                    child: Image.network(
                      photoSmallUrl,
                      height: 200,
                      width: 200,
                      fit: BoxFit.contain,
                    ),
                  ),
                ),
                Link(
                    uri: Uri.parse(photoFullQualityUrl),
                    builder: (context, followLink) {
                      return TextButton(
                        onPressed: followLink,
                        child: const Text('Baixar'),
                      );
                    }),
                const SizedBox(height: 10),
              ],
            ),
          ),
        );
      }
    }
    return Wrap(
      direction: Axis.horizontal,
      spacing: 10,
      children: networkImgList,
    );
  }

  Widget _pedidoUi(
    BuildContext ctx,
    List<dynamic> pedList,
    int index,
    double sWidth,
  ) {
    return Column(
      children: [
        //Modelos 3d text
        const SizedBox(height: 40),
        Container(
          //color: Colors.black12.withOpacity(0.04),
          height: 50,
          child: Align(
            alignment: Alignment.topCenter,
            child: const Text(
              'Modelos Superior/Inferior:',
              style: const TextStyle(
                color: Colors.black54,
                fontSize: 18,
                //fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
        ElevatedButton.icon(
          onPressed: () async {
            setState(() {
              modelsVisible = !modelsVisible;
            });
          },
          icon: modelsVisible
              ? const Icon(Icons.visibility)
              : const Icon(Icons.visibility_off),
          label: modelsVisible ? const Text('Esconder') : const Text('mostrar'),
        ),
        Visibility(
          visible: modelsVisible,
          maintainState: true,
          child: Column(
            children: [
              //Modelo Superior
              //NOTE! If website url changes has diferente names, use the primary
              _modelo3d(
                key: key,
                modelUrl: _modeloSupLink,
                title: 'Modelo Superior',
                viewer3dUrl: RotasUrl.rotaModSupWebView,
              ),
              const SizedBox(height: 20),
              //Modelo Inferior
              _modelo3d(
                key: key1,
                modelUrl: _modeloInfLink,
                title: 'Modelo Inferior',
                viewer3dUrl: RotasUrl.rotaModInfWebView,
              ),
            ],
          ),
        ),
        const SizedBox(height: 40),
        const Text(
          'Problemas? Visualize em nova janela:',
          style: const TextStyle(
            color: Colors.black54,
            fontSize: 18,
            //fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 40),
        Flex(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          direction: sWidth > 800 ? Axis.horizontal : Axis.vertical,
          children: [
            ElevatedButton.icon(
              onPressed: () async {
                setState(() {
                  modelsVisible = false;
                });
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => ViewModeloScreen(
                      key: key,
                      modelUrl: _modeloSupLink,
                      title: 'Modelo Superior',
                      viewer3dUrl: RotasUrl.rotaModSupWebView,
                    ),
                  ),
                );
              },
              icon: const Icon(Icons.visibility),
              label: const Text('Visualizar superior'),
            ),
            const SizedBox(
              height: 20,
              width: 20,
            ),
            ElevatedButton.icon(
              onPressed: () async {
                setState(() {
                  modelsVisible = false;
                });
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => ViewModeloScreen(
                      key: key,
                      modelUrl: _modeloInfLink,
                      title: 'Modelo Inferior',
                      viewer3dUrl: RotasUrl.rotaModInfWebView,
                    ),
                  ),
                );
              },
              icon: const Icon(Icons.visibility),
              label: const Text('Visualizar Inferior'),
            ),
          ],
        ),
        //Fotografias
        //text
        const SizedBox(height: 40),
        Container(
          //color: Colors.black12.withOpacity(0.04),
          height: 50,
          child: Align(
            alignment: Alignment.topCenter,
            child: const Text(
              'Fotografias:',
              style: const TextStyle(
                color: Colors.black54,
                fontSize: 18,
                //fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),

        Container(
          child: _mapImagesUrlToUi(
            ctx,
            pedList[index]['fotografias'],
          ),
        ),
        //Radiografias
        const SizedBox(height: 40),
        Container(
          //color: Colors.black12.withOpacity(0.04),
          height: 50,
          child: Align(
            alignment: Alignment.topCenter,
            child: const Text(
              'Radiografias:',
              style: const TextStyle(
                color: Colors.black54,
                fontSize: 18,
                //fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),

        Container(
          child: _mapImagesUrlToUi(
            ctx,
            pedList[index]['radiografias'],
          ),
        ),
        const SizedBox(height: 50),
        /*
        ElevatedButton.icon(
          onPressed: () async {
            _downloadAll();
          },
          icon: const Icon(Icons.download_done_rounded),
          label: const Text('Baixar Tudo'),
        ),*/
      ],
    );
  }

  Widget _modelo3d({
    String title,
    String modelUrl,
    String viewer3dUrl,
    ValueKey key,
  }) {
    //Modelos digitais
    if (modelUrl == null) {
      return Center(
        child: const Text('Sem modelo'),
      );
    } else {
      return Container(
        padding: const EdgeInsets.symmetric(
          horizontal: 50,
          vertical: 50,
        ),
        child: Column(
          children: [
            Center(child: Text(title)),
            Card(
              elevation: 0,
              child: EasyWebView(
                key: key,
                src: viewer3dUrl,
                isHtml: false, // Use Html syntax
                isMarkdown: false, // Use markdown syntax
                convertToWidgets: false, // Try to convert to flutter widgets
                onLoaded: () => null,
                width: 800,
                height: 500,
              ),
            ),
            Link(
                uri: Uri.parse(modelUrl),
                builder: (context, followLink) {
                  return TextButton(
                    onPressed: followLink,
                    child: const Text('Baixar'),
                  );
                }),
          ],
        ),
      );
    }
  }

  Future<bool> _deletePedidoDialog(BuildContext ctx, int index) async {
    return showDialog(
      barrierDismissible: true,
      context: ctx,
      builder: (BuildContext ctx2) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('Deletar'),
              content: const Text('Deletar pedido?'),
              actions: [
                TextButton(
                  onPressed: () {
                    _pedidosListStore
                        .deletarPedido(pedList[index]['id'])
                        .then((_) {
                      Navigator.of(ctx).pop(true);
                    });
                  },
                  child: const Text('Sim'),
                ),
                TextButton(
                  onPressed: () {
                    Navigator.of(ctx).pop(false);
                  },
                  child: const Text('Não'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  /*
  Future<bool> _gerarZipDialog(BuildContext ctx, int index) async {
    return showDialog(
      barrierDismissible: true,
      context: ctx,
      builder: (BuildContext ctx2) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('Baixar todo tratamento'),
              content: const Text(
                  '1) Baixa o último compactado gerado. 2) Gera um compactado atualizado'),
              actions: [
                TextButton(
                  onPressed: () {
                    //Navigator.of(ctx).pop(true);
                  },
                  child: const Text('1) Baixar .zip'),
                ),
                Expanded(
                  child: Container(),
                ),
                TextButton(
                  onPressed: () {
                    //Navigator.of(ctx).pop(false);
                  },
                  child: const Text('2) Gerar .zip atualizado'),
                ),
              ],
            );
          },
        );
      },
    );
  }
*/
  Future<void> _viewImage(BuildContext ctx, String imgUrl) async {
    return showDialog(
      barrierDismissible: true,
      context: ctx,
      builder: (BuildContext ctx2) {
        return AlertDialog(
          title: Center(child: const Text('Imagem')),
          content: Container(
            width: MediaQuery.of(context).size.width,
            height: MediaQuery.of(context).size.height,
            padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 20),
            child: InteractiveViewer(
              panEnabled: true, // Set it to false to prevent panning.
              boundaryMargin: const EdgeInsets.all(80),
              minScale: 0.5,
              maxScale: 4,
              child: Image.network(
                imgUrl,
                width: MediaQuery.of(context).size.width,
                fit: BoxFit.contain,
                loadingBuilder: (context, child, loadingProgress) {
                  if (loadingProgress == null) {
                    return child;
                  }
                  return Center(
                    child: CircularProgressIndicator(
                      valueColor: new AlwaysStoppedAnimation<Color>(
                        Colors.blue,
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(ctx).pop();
              },
              child: const Text('Fechar'),
            ),
          ],
        );
      },
    );
  }

  Future<List<dynamic>> _fetchRelatorio(int pedidoId) async {
    var _response = await http.get(
      Uri.parse(RotasUrl.rotaMeuRelatorio + '?pedidoId=' + pedidoId.toString()),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer ${_authStore.token}'
      },
    );

    List<dynamic> data = json.decode(_response.body);

    if (!data[0].containsKey('error')) {
      relatorioData = data;
      relatorioFirstFetch = false;
    }

    return data;
  }

  Future<List<dynamic>> _fetchZip(int pedidoId) async {
    var _response = await http.get(
      Uri.parse(RotasUrl.rotaUploads3CustomZip +
          '?queryString=' +
          pedidoId.toString()),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer ${_authStore.token}'
      },
    );

    List<dynamic> data = json.decode(_response.body);

    if (data[0].containsKey('error')) {
      return [];
    }

    return data;
  }

  Widget _manageRelatorioBtn(
    BuildContext ctx,
    int index,
    List<dynamic> data,
    String codPedido,
  ) {
    //Prevent null bug if connection failed
    if (data == null) {
      return Container(
        width: 300,
        child: const ElevatedButton(
          child: const Text(
            'ERRO AO BUSCAR RELATÓRIO',
          ),
          onPressed: null,
        ),
      );
    }
    if (data[0].containsKey('error')) {
      if (_authStore.role == 'Credenciado') {
        return Container(
          width: 300,
          child: ElevatedButton(
            child: const Text(
              'RELATÓRIO NÃO FINALIZADO',
            ),
            onPressed: () {},
          ),
        );
      }
      return Container(
        width: 300,
        child: ElevatedButton(
          child: const Text(
            'GERAR RELATÓRIO',
          ),
          onPressed: () {
            Navigator.of(context).pushNamed(
              GerarRelatorioScreen.routeName,
              arguments: {
                'pedidoId': pedList[index]['id'],
                'pacienteId': pedList[index]['paciente']['id']
              },
            ).then((didUpdate) {
              Navigator.pop(context, true);
              /*
              Future.delayed(
                Duration(milliseconds: 800),
                () => _pedidosListStore.clearPedidosAndUpdate(),
              );*/
            });
          },
        ),
      );
    } else if (data[0]['pronto'] == false) {
      return Container(
        width: 300,
        child: ElevatedButton(
          child: const Text(
            'RELATÓRIO NÃO FINALIZADO',
          ),
          onPressed: () {},
        ),
      );
    } else {
      return Container(
        width: 300,
        child: ElevatedButton(
          child: const Text(
            'VISUALIZAR RELATÓRIO',
          ),
          onPressed: () {
            Navigator.of(context).pushNamed(
              RelatorioViewScreen.routeName,
              arguments: {
                'pedido': pedList[index],
              },
            ).then((didUpdate) {
              if (didUpdate) {
                Navigator.pop(context, true);
              }
            });
          },
        ),
      );
    }
  }

  Widget _manageNemoBtn(
    BuildContext ctx,
    int index,
  ) {
    if (pedList[index]['modelo_nemo']['modelo_nemo'] == null) {
      return Container(
        width: 300,
        child: ElevatedButton(
          child: const Text(
            'SEM MODELO NEMO',
          ),
          onPressed: null,
        ),
      );
    } else {
      return Container(
        width: 300,
        child: ElevatedButton(
          child: const Text(
            'BAIXAR MODELO NEMO',
          ),
          onPressed: () async {
            String nemo = pedList[index]['modelo_nemo']['modelo_nemo'];
            if (nemo.contains('http')) {
              await launch(nemo);
            }
          },
        ),
      );
    }
  }

  Widget _optionsBtns(BuildContext ctx, int index) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 20),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          /*if (_authStore.role != 'Credenciado')
            Container(
              width: 300,
              child: ElevatedButton(
                style: ButtonStyle(
                  backgroundColor: MaterialStateProperty.resolveWith<Color>(
                    (Set<MaterialState> states) {
                      return Colors.red; // Use the component's default.
                    },
                  ),
                ),
                child: const Text(
                  'EXCLUIR PEDIDO',
                ),
                onPressed: () async {
                  var didDelete = await _deletePedidoDialog(ctx, index);
                  if (didDelete) {
                    Navigator.pop(context, true);
                  }
                },
              ),
            ),*/
        ],
      ),
    );
  }

  Future<void> _downloadAll() async {
    ScaffoldMessenger.of(context).removeCurrentSnackBar();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        duration: const Duration(seconds: 3),
        content: Row(children: [
          const Text('Baixando tudo...'),
          CircularProgressIndicator(
            valueColor: new AlwaysStoppedAnimation<Color>(
              Colors.blue,
            ),
          ),
        ]),
      ),
    );
    //Download all photoss
    await pedList[index]['fotografias'].forEach((key, foto) async {
      try {
        if (foto.contains('http')) {
          html.window.location.href = foto;
        }
      } catch (e) {}
    });

    //Download all radiografias
    await pedList[index]['radiografias'].forEach((key, foto) async {
      try {
        if (foto.contains('http')) {
          html.window.location.href = foto;
        }
      } catch (e) {}
    });

    //Download modelo superior
    try {
      if (pedList[index]['modelo_superior']['modelo_superior']
          .contains('http')) {
        await Future.delayed(Duration(seconds: 1), () async {
          html.window.location.href =
              pedList[index]['modelo_superior']['modelo_superior'];
        });
      }
    } catch (e) {}

    //Download modelo inferior
    try {
      if (pedList[index]['modelo_inferior']['modelo_inferior']
          .contains('http')) {
        await Future.delayed(Duration(seconds: 1), () async {
          html.window.location.href =
              pedList[index]['modelo_inferior']['modelo_inferior'];
        });
      }
    } catch (e) {}
  }

  @override
  Widget build(BuildContext context) {
    _authStore = Provider.of<AuthProvider>(context);
    _pedidosListStore = Provider.of<PedidosListProvider>(context);
    Map args = ModalRoute.of(context).settings.arguments;
    if (!_authStore.isAuth) {
      return LoginScreen();
    }

    pedList = _pedidosListStore.getPedidosList();
    if (pedList == null) {
      return Container(
        child: Align(
          alignment: Alignment.topCenter,
          child: const Text('Aguarde..'),
        ),
      );
    }

    if (pedList[0].containsKey('error')) {
      return Container(
        child: Align(
          alignment: Alignment.topCenter,
          child: const Text('Aguarde..'),
        ),
      );
    }

    index = args['index'];

    _setModelosUrlToStorage(
      pedList[index]['modelo_superior']['modelo_superior'],
      pedList[index]['modelo_inferior']['modelo_inferior'],
    );
    //Setting modelos links to global var for download btn
    _modeloSupLink = pedList[index]['modelo_superior']['modelo_superior'];
    _modeloInfLink = pedList[index]['modelo_inferior']['modelo_inferior'];

    final double sWidth = MediaQuery.of(context).size.width;
    final double sHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      appBar: SecondaryAppbar(),
      // *BUG* Verify closing drawer automaticlly when under 1200
      //drawer: sWidth < 1200 ? MyDrawer() : null,
      body: Container(
        width: sWidth,
        height: sHeight,
        child: Scrollbar(
          thickness: 15,
          isAlwaysShown: true,
          showTrackOnHover: true,
          child: SingleChildScrollView(
            child: Padding(
              padding: EdgeInsets.symmetric(
                horizontal: sWidth > 760 ? 100 : 8,
                vertical: 50,
              ),
              child: Column(
                children: [
                  //Código pedido
                  Container(
                    //color: Colors.black12.withOpacity(0.04),
                    height: 50,
                    child: Align(
                      alignment: Alignment.topCenter,
                      child: Text(
                        '${'PEDIDO: ' + pedList[index]['codigo_pedido']}' ?? '',
                        style: const TextStyle(
                          color: Colors.black54,
                          fontSize: 36,
                          //fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                  //Divider
                  Container(
                    padding: const EdgeInsets.only(bottom: 40),
                    child: Divider(
                      color: Colors.grey,
                    ),
                  ),

                  //VISUALIZAR/EDITAR PEDIDO
                  Container(
                    width: 300,
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.of(context).pushNamed(
                          EditarPedido.routeName,
                          arguments: {
                            'codigoPedido': pedList[index]['codigo_pedido'],
                            'pedidoId': pedList[index]['id'],
                            'userId': pedList[index]['users_permissions_user']
                                ['id'],
                            'enderecoId': pedList[index]['endereco_usuario']
                                ['id'],
                            'pedidoDados': pedList[index],
                          },
                        ).then((needsUpdate) {
                          if (needsUpdate) {
                            Navigator.pop(context, true);
                          }
                        });
                      },
                      child: const Text(
                        'VISUALIZAR/EDITAR PEDIDO',
                        style: const TextStyle(
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                  //RELATÓRIO
                  const SizedBox(height: 20),
                  if (relatorioFirstFetch)
                    FutureBuilder(
                      future: _fetchRelatorio(pedList[index]['id']),
                      builder: (ctx, snapshot) {
                        if (snapshot.connectionState == ConnectionState.done) {
                          return _manageRelatorioBtn(
                            ctx,
                            index,
                            snapshot.data,
                            pedList[index]['codigo_pedido'],
                          );
                        } else {
                          return CircularProgressIndicator(
                            valueColor: new AlwaysStoppedAnimation<Color>(
                              Colors.blue,
                            ),
                          );
                        }
                      },
                    ),
                  if (!relatorioFirstFetch &&
                      !relatorioData[0].containsKey('error'))
                    _manageRelatorioBtn(
                      context,
                      index,
                      relatorioData,
                      pedList[index]['codigo_pedido'],
                    ),
                  const SizedBox(height: 20),
                  if (_authStore.role != 'Credenciado')
                    _manageNemoBtn(
                      context,
                      index,
                    ),
                  const SizedBox(height: 20),
                  //LINK .ZIP
                  if (_authStore.role != 'Credenciado')
                    Container(
                      width: 300,
                      child: ElevatedButton(
                        child: !fetchingZip
                            ? const Text(
                                'BAIXAR TODO TRATAMENTO',
                              )
                            : Center(
                                child: CircularProgressIndicator(
                                  valueColor: new AlwaysStoppedAnimation<Color>(
                                    Colors.blue,
                                  ),
                                ),
                              ),
                        onPressed: !fetchingZip
                            ? () async {
                                //_gerarZipDialog(context, index);
                                if (pedList[index]['link_tratamento_zip'] ==
                                    null) {
                                  setState(() {
                                    fetchingZip = true;
                                  });
                                  List<dynamic> data =
                                      await _fetchZip(pedList[index]['id']);

                                  if (data[0].containsKey('url')) {
                                    await launch(data[0]['url']);
                                    Navigator.of(context).pop(true);
                                    Future.delayed(Duration(milliseconds: 800),
                                        () {
                                      _pedidosListStore.clearPedidosOnLeave();
                                      _pedidosListStore.clearPedidosAndUpdate();
                                    });
                                  } else {
                                    setState(() {
                                      fetchingZip = false;
                                    });
                                    ScaffoldMessenger.of(context)
                                        .removeCurrentSnackBar();
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        duration: const Duration(seconds: 5),
                                        content: const Text('Algo deu errado'),
                                      ),
                                    );
                                  }
                                } else {
                                  setState(() {
                                    fetchingZip = true;
                                  });
                                  await launch(
                                      pedList[index]['link_tratamento_zip']);
                                  setState(() {
                                    fetchingZip = false;
                                  });
                                }
                              }
                            : null,
                      ),
                    ),
                  const SizedBox(height: 20),
                  if (_authStore.role != 'Credenciado')
                    const Text(
                      'Obs: exigirá confirmação.',
                    ),
                  _optionsBtns(
                    context,
                    index,
                  ),
                  if (pedList[index]['link_modelos'] != null &&
                      pedList[index]['link_modelos'].length > 0)
                    Column(
                      children: [
                        const SizedBox(height: 20),
                        Card(
                          elevation: 5,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(
                              vertical: 15.0,
                              horizontal: 30,
                            ),
                            child: Column(
                              children: [
                                const SizedBox(
                                  height: 20,
                                ),
                                const Text(
                                  'Link dos modelos (clique para copiar)',
                                  style: const TextStyle(fontSize: 18),
                                ),
                                const SizedBox(height: 20),
                                InkWell(
                                  onTap: () {
                                    Clipboard.setData(
                                      ClipboardData(
                                          text: pedList[index]['link_modelos']),
                                    );
                                    ScaffoldMessenger.of(context)
                                        .removeCurrentSnackBar();
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        duration: const Duration(seconds: 3),
                                        content: const Text('Link copiado!'),
                                      ),
                                    );
                                  },
                                  child: Text(
                                    pedList[index]['link_modelos'] ?? '',
                                    style: const TextStyle(fontSize: 18),
                                  ),
                                ),
                                const SizedBox(
                                  height: 20,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),

                  _pedidoUi(context, pedList, index, sWidth),
                  const SizedBox(height: 40),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
